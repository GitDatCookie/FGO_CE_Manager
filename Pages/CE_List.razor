@page "/CE_List"
@using FGO_CE_Manager.Data.ViewModel;
@inject CEServices cService 
@inject EventServices eService

<PageTitle>Counter</PageTitle>

<MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="()=> CleanDB()">Delete Database</MudButton>
<MudButton Variant="Variant.Text" Color="Color.Secondary" OnClick="()=> FillDB()">Seed Database</MudButton>

<MudDataGrid T="CEView" MultiSelection="true" Items="@CEs" SortMode="SortMode.Multiple" Filterable="true" QuickFilter="@_quickFilter"
             Hideable="true" RowClick="@RowClicked" SelectedItemsChanged="@SelectedItemsChanged">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Periodic Elements</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>

    <Columns>
        <SelectColumn T="CEView" />
        <PropertyColumn Property="x => x.CECollectionNo" Title="Collection Nr." Sortable="true" Filterable="false" />
        <PropertyColumn Property="x => x.CEName" SortBy="@_sortBy" />
        <PropertyColumn Property="x => x.ImageFace" Title="Images" />
        
        <MudTemplateColumn>
            <MudImage resource="x => x.ImageFace"></MudImage>
        </MudTemplateColumn>

        <PropertyColumn Property="x => x.EventNames" Title="Events" />

    </Columns>
    <PagerContent>
        <MudDataGridPager T="CEView" />
    </PagerContent>
</MudDataGrid>

<div class="d-flex flex-wrap mt-4">
    <MudSwitch @bind-Checked="@_sortNameByLength" Color="Color.Primary">Sort Name Column By Length</MudSwitch>
</div>

<MudExpansionPanels Style="flex:1">
    <MudExpansionPanel Text="Show Events">
        @foreach (var message in _events)
        {
            <MudText Typo="@Typo.body2">@message</MudText>
        }
        @if (_events.Count > 0)
        {
            <div class="d-flex">
                <MudSpacer />
                <MudButton Class="mt-3" ButtonType="ButtonType.Button" Variant="Variant.Filled" OnClick="@(() => _events.Clear())">Clear</MudButton>
            </div>
        }
    </MudExpansionPanel>
</MudExpansionPanels>


@code {
    private IEnumerable<CEView> CEs = new List<CEView>();
    private IEnumerable<FGOEvent> Events = new List<FGOEvent>();
    private string _searchString;
    private bool _sortNameByLength;
    private List<string> _events = new();
    // custom sort by name length

    private Func<CEView, object> _sortBy => x =>
    {
        if (_sortNameByLength)
            return x.CEName.Length;
        else
            return x.CEName;
    };
    // quick filter - filter globally across multiple columns with the same input
    private Func<CEView, bool> _quickFilter => c =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (c.CEName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;


        return false;
    };

    public void CleanDB()
    {
        cService.CleanDB();
    }

    public async Task FillDB()
    {
        Events = eService.GetEventList();
        CEs = cService.GetEventCEList();

        if(Events.Count() == 0)
        {
            await eService.FillEventDatabase();
        }

        if (CEs.Count() == 0)
        {
            await cService.FillCEDatabase();
            CEs = cService.GetEventCEList();
        }
    }
    protected override async Task  OnInitializedAsync()
    {
        
    }

    // events
    void RowClicked(DataGridRowClickEventArgs<CEView> args)
    {
        // _events.Insert(0, $"Event = RowClick, Index = {args.RowIndex}, Data = {System.Text.Json.JsonSerializer.Serialize(args.Item)}");
    }

    void SelectedItemsChanged(HashSet<CEView> items)
    {
        // _events.Insert(0, $"Event = SelectedItemsChanged, Data = {System.Text.Json.JsonSerializer.Serialize(items)}");
    }


}

